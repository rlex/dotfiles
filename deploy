#!/bin/bash
### Simple shell script for symlinking all files from .rc dir to home directory (c) Lex Rivera

### Array of all config files and directories
# dotfiles, for example .bashrc. Put it in array without leading dot. Also dirs.
dotfiles=( screenrc vimrc zshrc bashrc bash_profile gemrc htoprc gitconfig biewrc dircolors ackrc
           muttrc toprc Xdefault gvimrc vim mutt config/awesome config/mc config/htop tmux.conf
           mailcap gitignore_global )
brew_kegs=( ack android-platform-tools bash brew-cask curl dhcpdump dos2unix ettercap foremost git
            git-encrypt git-extras git-lfs gnupg2 grep hadoop hashpump htop-osx arping httping
            dhcpdump dhcping dnstracer httpie iperf3 john-jumbo lzo mitmproxy mobile-shell moreutils
            mutt nmap p7zip pigz pngcheck pwgen sqlite sqlmap tcpreplay tcptrace tig graphicsmagick
            sysdig ansible tmux unrar vim wget zsh zsh-completions coreutils moreutils findutils
            grep openssh screen foremost nmap pngcheck socat sqlmap xz pigz tree mtr docker-machine
            docker )
cask_kegs=( alfred apache-directory-studio charles chromium dropbox flux gitify gns3 java netspot
            pycharm royal-tsx sequel-pro skype spectacle spotify sublime-text3 teamspeak-client
            transmission tuntap virtualbox visualvm vlc vmware-fusion xca xquartz )

# Function to symlink dotfiles
# We checking if OS is Linux (GNU coreutils)
# If not, we assume OS uses BSD utils
# Yeah this is fuckin' dirty, but works in most of cases
symlink() {
  if [[ `uname` == "Linux" ]];
    then
      ln -sfvn $1 $2
    else
      ln -sfvh $1 $2
  fi
}

case "$1" in

  env) echo "Deploying environment"
       cd ~/.rc
       echo "Deploying dotfiles from `pwd` to ${HOME}"
       if [ -d ~/.config ];
        then
           echo "skipping config folder creation"
        else
          mkdir ~/.config
       fi

       for file in ${dotfiles[@]}
         do
           symlink ~/.rc/.${file} ~/.${file}
         done
       echo "Finished!"

       cd - >&/dev/null
  ;;

  devenv) echo "Deploying pyenv,rbenv,nodenv"

         if [ -d ~/.rbenv ]; then
            echo "rbenv seems to be already installed - aborting"
         else
            echo "installing rbenv"
            git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
         fi

         if [ -d ~/.rbenv/plugins/ruby-build ]; then
             echo "ruby-build seems to be already installed - aborting"
          else
              echo "installing ruby-build"
              git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
         fi

         if [ -d ~/.pyenv ]; then
             echo "pyenv seems to be already installed - aborting"
          else
              echo "installing pyenv"
              git clone https://github.com/yyuu/pyenv.git ~/.pyenv
         fi

         if [ -d ~/.nodenv ]; then
            echo "nodenv seems to be already installed - aborting"
         else
            echo "installing nodenv"
              git clone https://github.com/OiNutter/nodenv ~/.nodenv
            fi

           if [ -d ~/.nodenv/plugins/node-build ]; then
               echo "node-build seems to be already installed - aborting"
           else
               echo "installing node-build"
               git clone https://github.com/OiNutter/node-build ~/.nodenv/plugins/node-build
           fi


  ;;

  homebrew) echo "Installing homebrew and favourite packages"
            #probably i should migrate to manual install.
            #Running (even respected) scripts from interwebs is stupid.
            if [ ! -f /usr/local/bin/brew ]; then
              ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            fi
            for keg in ${brew_kegs[@]}
              do
                brew install ${keg}
            done
#            for cask_keg in ${cask_kegs[@]}
#              do
#                brew cask install ${cask_keg}
#            done

  ;;

  nuke) echo "Cleaning up env"
        echo "Removing dotfiles"
        for file in ${dotfiles[@]}
          do
            rm -vf ~/.${file}
        done
        echo "Cleaning up devenv"
        rm -rvf ~/.pyenv
        rm -rvf ~/.rbenv
        echo "Removing history"
        rm -vf ~/.zsh-history
        rm -vf ~/.bash_history
        echo "Removing directory"
        rm -rf ~/.rc
  ;;

  housekeeper) echo "Updating dotfiles repo"
               git -C ~/.rc pull
               echo "Cleaning up outdated symlinks"
               find -L $HOME -maxdepth 1 -type l -exec rm -i {} +
               if [ -f /usr/local/bin/brew ]; then
                 echo "Updating & cleaning up homebrew"
                 brew update
                 brew upgrade
                 brew cleanup
                 brew prune
                 #brew cask update
                 #brew cask cleanup
                 echo "Done"
               fi

               if [ -d ~/.rbenv ]; then
                   echo "Updating rbenv"
                   cd ~/.rbenv && git pull
                   if [ -d ~/.rbenv/plugins/ruby-build ]; then
                     echo "Updating ruby-build"
                     cd ~/.rbenv/plugins/ruby-build && git pull
                   fi
               fi

               if [ -d ~/.pyenv ]; then
                 echo "Updating pyenv"
                 cd ~/.pyenv && git pull
               fi

               if [ -d ~/.nodenv ]; then
                 echo "Updating nodenv"
                 cd ~/.nodenv && git pull
                 if [ -d ~/.nodenv/plugins/node-build ]; then
                   echo "Updating node-build"
                   cd ~/.nodenv/plugins/node-build && git pull
                 fi
               fi
  ;;

  *) echo "Possible args:"
     echo "env - deploy basic dotfiles"
     echo "devenv - deploy basic dotfiles + pyenv/rbenv/nodenv"
     echo "homebrew - install homebrew and favourite packages"
     echo "nuke - remove all symlinks, devenv and shell history"
     echo "housekeeper - upgrade homebrew and devenv"
esac
