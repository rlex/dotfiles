#!/bin/bash
### Simple shell script for symlinking all files from .rc dir to home directory (c) Lex Rivera

### Array of all config files and directories
# dotfiles, for example .bashrc. Put it in array without leading dot
dotfiles=( screenrc vimrc zshrc bashrc bash_profile gemrc htoprc gitconfig biewrc dircolors ackrc muttrc my.cnf toprc Xdefaults gvimrc nanorc )
# dotdirs, for example .vim, also, without leading dot
dotdirs=( mc vim mutt )
# dirs inside ~/.config. They do not include leading dot at all, even when deployed :)
dotconf=( awesome )


# Function to symlink dotfiles
# We checking if OS is Linux (GNU coreutils), if no, we assume OS use BSD utils
# Yeah this is fuckin' dirty, but works in most of cases
symlink() {
    if [[ `uname` == "Linux" ]];
        then
            ln -sfv $1 $2
        else
            ln -sv $2 $1
    fi
}

# dotfiles deployment

cd ~/.rc
echo "Deploying dotfiles from `pwd` to ${HOME}"

# Standart dotfiles
echo "Deploying standart dotfiles..."
for file in ${dotfiles[@]}
    do
        symlink ~/.rc/.${file} ~/.${file}
    done
echo "Finished!"

# dotdirs deployment. It needs a workaround to not create infinite symlinks
echo "Deploying dotdirs to ${HOME}..."
for dir in ${dotdirs[@]}
    do
        if [[ -L ${HOME}/.${dir} ]];
            then
                echo "~/.${dir} already exists!"
            else
                symlink ~/.rc/.${dir}/ ~/.${dir}
        fi
done
echo "Finished!"

# awesome deployment to .config directory.
echo "Deploying confdirs to ${HOME}/.config"
confdir() {
for confdir in ${dotconf[@]}
    do
        if [[ -L $HOME/.config/$confdir ]];
            then
                echo "~/.rc/.config/${confdir} already exists!"
            else    
                symlink ~/.rc/.config/${confdir} ~/.config/${confdir}
        fi
done
}

if [[ -d ${HOME}/.config ]];
    then
        confdir
    else
        echo "${HOME}/.config directory not found, let's make it..."
        mkdir ~/.config
        confdir
fi
echo "Finished!"

cd - >&/dev/null
