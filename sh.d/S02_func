# get current revision of a repo
svn_revision() { 
    svn info $@ | awk '/^Revision:/ {print $2} ;'
}

# print the log or no changes after an update
svn_up_and_log() {
    local old_rev=$(svn_revision $@)
    local first_up=$((${old_rev} + 1))
    svn up -q $@
    if [ $(svn_revision $@) -gt ${old_rev} ];
    then
        svn log -v -rHEAD:${first_up} $@
    else
        echo "No changes.";
    fi
}

# tag a directory in a command to come to it later
tag() {
    alias $1="cd $PWD";
}

dirdiff() {
#TODO fix for other OSes (bsd-like)
    diff -yB -W 80 <(ls -1 --color=never "$1") <(ls -1 --color=never "$2")
}

zomb_ps() {
    ps hr -Nos | awk '$1=="Z" {print $1}'
}

fixtty() {
    stty sane
    reset
}

findfiles() {
    if [[ -z $1 ]]; then
        echo "Find files recursively starting at \`pwd\` - usage: findfiles pattern"
        return
    fi
        find . -type f \( -name "*$1*" -o -name ".$1*" -o -name ".*.*$1*" -o -name "*$1*.*" \) -print

}
finddirs() {
    if [[ -z $1 ]]; then
        echo "Find directories recursively starting at \`pwd\` - usage: finddirs pattern"
        return
    fi
        find . -type d \( -name "*$1*" -o -name ".$1*" -o -name ".*.*$1*" -o -name "*$1*.*" \) -print
}

bu() {
    for f in "$@"
        do cp -a $f ~/.backup/${f}-`date +%Y%m%d%H%M`.backup ;
    done
} 

pk() {
    if [ $1 ] ; then
        case $1 in
            tbz)    tar cjvf $2.tar.bz2 $2      ;;
            tgz)    tar czvf $2.tar.gz  $2     ;;
            tar)    tar cpvf $2.tar  $2       ;;
            bz2)    bzip $2 ;;
            gz)     gzip -c -9 -n $2 > $2.gz ;;
            zip)    zip -r $2.zip $2   ;;
            7z)     7z a $2.7z $2    ;;
            *)      echo "'$1' cannot be packed via pk()" ;;
        esac
    else
        echo "'$1' is not a valid file";
    fi
}

digg() {
    case $1 in
        bind) dig +nocmd $2 any +multiline +noall +answer ;;
        *) dig -t $1 $2 +noall +answer +nocmd ;;
    esac
}
#toast install function
install_toast() {
perl -e 'socket(S,2,1,0)&&connect(S,pack("Sna4x8",2,80,gethostbyname(
    $h="toastball.net")||die("dns")))&&syswrite(S,"GET /toast/toast "
    ."HTTP/1.0\nHost: $h\n\n")&&open(STDIN,"<&S")&&exec($^X,qw(-x -
    arm toast))||die($!)';
}

#rvm installation
install_rvm () {
curl -L https://get.rvm.io | bash -s stable
}

history-all() { 
history -E 1;
}

psgrep() {
        if [ ! -z $1 ] ; then
                echo "Grepping for processes matching $1..."
                ps -A -o pid,uname,%cpu,%mem,stat,time,args | grep "$1" | grep -v grep
        else
                echo "Usage: psgrep <pattern>";
        fi
}

grab() {
        sudo chown -R ${USER} ${1:-.};
}

have() {
        type "$1" &> /dev/null;
}

calc() {
    gawk -v CONVFMT="%12.2f" -v OFMT="%.9g"  "BEGIN { print $* ; }";
}

cpx() {
        if [ -z "$1" -o -z "$2" ]
        then
                echo Usage: cpx src dest
                return 1
        fi

        tar cpf - $1 | (cd $2 && tar xvpBf -)
        return $?
}

ssh-send-id() {
    if [ -z "$1" -o -z "$2" ]
    then
        echo "Usage: ssh-send-id pubkey_name machine"
        return 1
    fi
        cat ~/.ssh/${1}.pub | ssh $2 'mkdir .ssh; cat >> .ssh/authorized_keys'
        return $?
}

nss-manage() {
    case "$1" in

    list)    certutil -d sql:$HOME/.pki/nssdb -L ;;
    details) certutil -d sql:$HOME/.pki/nssdb -L -n "$2" ;;
    add-ca)  certutil -d sql:$HOME/.pki/nssdb -A -t "$2" -n "$3" -i "$4" ;;
    add)     pk12util -d sql:$HOME/.pki/nssdb -i "$2" ;;
    del)     certutil -d sql:$HOME/.pki/nssdb -D -n "$2" ;;
    *)
    echo "Usage list|details|add-ca|add|del"
    echo " \"details\" requires <nickname>"
    echo " \"add-ca\" requires <trustargs> <nickname> <certificate filename>"
    echo " \"add\" requires <filename>"
    echo " \"del\" requires <nickname>"
    ;;
    esac
}

flac2mp3() {
        OUTF=$1.mp3
        ARTIST=$(metaflac "$1" --show-tag=ARTIST | sed s/.\*=//g)
        TITLE=$(metaflac "$1" --show-tag=TITLE | sed s/.\*=//g)
        ALBUM=$(metaflac "$1" --show-tag=ALBUM | sed s/.\*=//g)
        GENRE=$(metaflac "$1" --show-tag=GENRE | sed s/.\*=//g)
        TRACKNUMBER=$(metaflac "$1" --show-tag=TRACKNUMBER | sed s/.\*=//g)
        DATE=$(metaflac "$1" --show-tag=DATE | sed s/.\*=//g)
        flac -c -d "$1" | lame -m j -q 0 --vbr-new -V 0 -s 44.1 - "$OUTF"
        id3 -t "$TITLE" -T "${TRACKNUMBER:-0}" -a "$ARTIST" -A "$ALBUM" -y "$DATE" -g "${GENRE:-12}" "$OUTF"
}
