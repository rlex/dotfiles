*indexer.txt* Plugin for automatically index project files using ctags
              and keep tags up-to-date.
              For Vim 7.x version



                     By Dmitry Frank
		            dimon.frank@gmail.com

Firstly: if you have any questions about this plugin, feel free
to email me: dimon.frank@gmail.com


                                          *indexer* *indexer-plugin*
	Contents:

         Options.....................|indexer-options|
         Commands...................|indexer-commands|
         Background...............|indexer-background|
         Debug commands.......|indexer-debug-commands|
         Troubleshooting.....|indexer-troubleshooting|
         Thanks.......................|indexer-thanks|

You can use this plugin to automatically index your project files 
using ctags. This can be very useful when it's used together with plugins
omnicppcomplete (for c, c++ development), code_complete.vim
and other plugins that using tags.
You also will able to jump from function call to its definition 
just by pressing Ctrl-] or g]

This plugin can work as add-on for project.tar.gz plugin. 
Indexer reads project file, parses it and builds tags for all files 
in project. But it can also work without this plugin.

Actually, if you use project.vim plugin and your projects file is
default (~/.vimprojects), then setting indexer up is very easily: 
you can just copy indexer.vim to your plugins directory, start Vim 
and open any file from your project.
The Indexer will detect that opened file from project 
and automatically start ctags (in background) for each file in this 
project. It also set &path and &tags options for Vim.

If you use project.vim but you have another projects file,
you should set option g:indexer_projectsSettingsFilename in your
vimrc. See |indexer-options| for details

If you don't use project.vim then you can use ".indexer_files" to 
define projects to index. 
Default location of this file is "~/.indexer_files". You can change
it by modifying variable g:indexer_indexerListFilename

Note that this file overrides "~/.vimprojects". If both files exists
only "~/.indexer_files" will be used.

Syntax of this file is very easy. Propably the best way to explain it
is show an example.

Example file "~/.indexer_files" >
   [CoolProject]

   /home/user/myproject/src/*.c
   /home/user/myproject/src/*.h
   /home/user/myproject/inc/*.h

   [AnotherProject]

   /home/user/myproject2**/*.c
   /home/user/myproject2**/*.h


NOTE: 
   /path/to/dir/*.c     means "files *.c from /path/to/dir"  (e.g. non-recursive)
   /path/to/dir**/*.c   means "files *.c from /path/to/dir and all subdirectories" (e.g. recursive)

I think, there's all obvious:
there's two projects: CoolProject and AnotherProject.
in CoolProject there's all *.c files in "myproject/src" and all header 
files in "myproject/inc". in AnotherProject there's both *.c and *.h 
files in "myproject2" and all subdirectories recursively. 
( "**" means recursively )
It's able to use environment variables in your paths.

You can define the same AnotherProject simplier: 
      >
   [AnotherProject]

   /home/user/myproject2**/*.[ch]

If you have many projects and you are lazy to put every project in
this file, you can put in your ~/.indexer_files something like this:

      >
   [PROJECTS_PARENT filter="*.c *.h *.cpp"]

   ~/workspace

The keyword is PROJECTS_PARENT.
In this way, every directory in ~/workspace will be interpreted as project,
and you can open any file from any project in ~/workspace, and the 
whole proper project will be indexed.

And, finally, it can autodetect project root. So, you can move your 
project to another place in filesystem, and all files will indexed anyway.
More detailed see in options, variable "g:indexer_lookForProjectDir".


Indexer 3.0 and later supports open several files from several 
projects. For example, a little story.

You have two projects: "project1" and "project2", and you use
"~/.indexer_files".

1) you open file1 from project1. 
   Indexer generates tags for all files from project1 and set &tags:
   ~/.indexer_files_tags/project1
2) you open file2 from the same project1.
   Indexer just notes that file2 is file from project1. 
   &tags does not change.
3) you open file3 from project2.
   Indexer generates tags for all files from project2 and set &tags:
   ~/.indexer_files_tags/project2.
4) you switch to buffer with file1.
   Indexer does not generate any tags, it will just change &tags to
   ~/.indexer_files_tags/project1
5) you switch to buffer with file3.
   Indexer changes &tags back to ~/.indexer_files_tags/project2 .

So, you should not care about your projects. It just works. If you
have some projects with subprojects, i recommend you use .vimprj directory
with specific settings for your project, in which you can set any 
options such as &tags, &tabstop, etc. More detailed: read about option
g:indexer_lookForProjectDir .

Actually, Indexer sets &path for needed project when you swith to new 
buffer, not only &tags.

                                                         *indexer-background*
Please NOTE: tags generate in background if only servername
is not empty. (if you don't know what is servername, please read
:help servername). Otherwise tags generate in Vim thread, and you need
to wait while ctags work.

If you use Gvim, then servername is "GVIM" by default (if all is ok), 
and so, background tags generation should work in Gvim "out of the box".
If you use console vim, you need to run vim somehow like that:

$ vim --servername MY_NAME

actually, you can make alias for this command, or something.

If servername is empty, then plugin will work anyway, but you need
to wait while ctags work. This is not really bad at rather small projects.


========================================================================
OPTIONS                                                  *indexer-options*

You can set these variables in your vimrc file before the plugin is loaded to
change its default behavior

                                               *indexer_lookForProjectDir*
g:indexer_lookForProjectDir (default: 1)

   if on, then plugin will recursively-up search for ".vimprj" directory.
   If it will be found, then plugin will source all "*.vim" files in it,
   and also will set environment variable $INDEXER_PROJECT_ROOT to
   directory in which is ".vimprj" directory.
   
   Your directory tree example:

      | home
      | | user
      | | | myproject
      | | | | src
      | | | | |-file1.c
      | | | | |-file2.c
      | | | | |-file3.c
      | | | | |
      | | | | inc
      | | | | |-file1.h
      | | | | |-file2.h
      | | | | |-file3.h
      | | | | |
      | | | | .vimprj
      | | | | |-conf.vim

   For example, you typing: >
      $ gvim /home/user/myproject/src/file1.c
----

   Then Indexer will detect your /home/user/myproject/.vimprj directory
   and source all files *.vim from it,
   and set $INDEXER_PROJECT_ROOT="/home/user/myproject"

   so, you can define any settings that are individual for
   your project, such as another .vimprojects file, tabstop, shiftwidth,
   or any other.

   This is great for people like me, that likes when ALL project files
   is in only one directory.

   When i need to copy project to another computer i just copying the
   whole folder, and all is done. I using $INDEXER_PROJECT_ROOT variable
   in my .vimprojects file, so that i can put project in any place in
   filesystem, and all files will be indexed, because 
   $INDEXER_PROJECT_ROOT will be always my real project root.

   If you have several projects with .vimprj directory, then you can open
   files from each project, and settings will be sourced every time you
   switch to buffer from another project. So, you might want to have
   some default settings that will be applied every time before
   source ".vimprj/*vim" files. There's option 
   g:indexer_defaultSettingsFilename to set name of file with default
   settings. You can specify your vimrc in it actually, but it will
   work slow if your vimrc not very small.

                                               *indexer_dirNameForSearch*
g:indexer_dirNameForSearch (default: ".vimprj")

   directory name with project settings for search (".vimprj" by default)

                                               *indexer_recurseUpCount*
g:indexer_recurseUpCount (default: 10)

   count of recurse-up for search ".vimprj" directory

                                               *indexer_indexerListFilename*
g:indexer_indexerListFilename (default: "~/.indexer_files")

   indexer filename. If this file exists then projects file are ignored.

                                           *indexer_projectsSettingsFilename*
g:indexer_projectsSettingsFilename (default: "~/.vimprojects")

   project filename. (the project file that plugin project.vim using)

                                                        *indexer_projectName*
g:indexer_projectName (default: '')

   if you don't wand to index any project, you can define one name.
   If it is empty, then indexes any found projects.
   By default is empty.

                                          *indexer_enableWhenProjectDirFound*
g:indexer_enableWhenProjectDirFound (default: 1)

   If this option is set, then if gvim started from project directory, this project
   will be indexed. Otherwise project will be indexed only if there's file 
   from this project opened 

                                                       *indexer_tagsDirname*
g:indexer_tagsDirname (default: "")

   directory to save tags file. If empty (by default), then using following:
   For example, you use file ~/.indexer_files, then tags will be in 
   ~/.indexer_files_tags/<project_name>, where <project_name> is name of
   your project =). 
   
   if not empty (for example, "/home/user/mytags"), then tags will be in files
   /home/user/mytags/_home_user__indexer_files_<project_name>.

   I recommend to use default.

                                            *indexer_ctagsCommandLineOptions*
g:indexer_ctagsCommandLineOptions

   ctags command line options. By default is: 
   "--c++-kinds=+p+l --fields=+iaS --extra=+q"

                                      *indexer_ctagsJustAppendTagsAtFileSave*
g:indexer_ctagsJustAppendTagsAtFileSave 
   (default: 1 for non-Windows (for example, Linux) , 0 for Windows)

   At each save of file from project, we need to update tags.
   If this option is on, then ctags will be started just for 
   current file with "-a" key, otherwise tags for all project 
   files will be rebuild.

   BTW, there's option g:indexer_useSedWhenAppend, and when it
   is on, then old tags removes from tags file before append.

   But at Windows all versions of Sed i have seen is buggy. 
   Because of this i made default value 0 on Windows systems.

   Actually, complete rebuild of all tags is not a problem, 
   because of tags generates in background, and you do not need
   to wait while ctags is working.
   

                                      *indexer_ctagsDontSpecifyFilesIfPossible*
g:indexer_ctagsDontSpecifyFilesIfPossible (possible values: -1, 0, 1; default: -1)

   When this option is 1, ctags starts just for project root
   directories with "-R" key. Works faster in most cases,
   but you can't specify what especially files should be indexed.

   When this option is 0, ctags starts for every file.

   When this option is -1, then with .indexer_files it behaves like 1,
   but with .vimprojects it behaves like 0.

                                                    *indexer_maxOSCommandLen*
g:indexer_maxOSCommandLen (default: OS depending)
   
   Shell command line length limitation.
   By default:
   At Windows this is 8000.
   At Linux this is getting by command:
   $ echo $(( $(getconf ARG_MAX) - $(env | wc -c) ))

   This is needed for executing ctags. If command with all files is too long,
   then several command will be executed, with "-a" key.
   NOTE: You need patched ctags 5.8.1 to make it work correctly with C/C++ files!
   Because of bug in ctags 5.8, you can read details about this bug and download 
   patched version here: http://dfrank.ru/ctags581/en.html

   Or use this direct links to download:
   Linux source (gzipped): http://dfrank.ru/download?f=ctags/ctags581
   Patch for version 5.8: http://dfrank.ru/download?f=ctags/patch_ctags_581.patch
   Windows binary: http://dfrank.ru/download?f=ctags/ctags.zip

                                                   *indexer_useSedWhenAppend*
g:indexer_useSedWhenAppend (default: 1)

   This option uses only when g:indexer_ctagsJustAppendTagsAtFileSave is ON.
   If 1, then at filesave from tags file will be removed all tags from
   saved file, and then new tags will be appended by ctags.

   This is needed to exclude garbage (obsolete tags) in tags file.
   
   NOTE: If you using Windows, then the better way is not to use sed,
   because of all Windows versions of Sed i have seen is buggy. 
   Read |indexer_ctagsJustAppendTagsAtFileSave| for details.
   

                                                 *indexer_backgroundDisabled*
g:indexer_backgroundDisabled (default: 0)
   
  If 0 (by default), then tags generate in background (if possible. see |indexer-background|)
  If non-zero, then tags always generate in Vim thread. 

  This option is added as a possible trouble-shoot. For instance, on Windows 7
  there was some problems with background tags generation. These troubles
  is solved in Indexer 3.14, but i don't know where i face same 
  troubles again =)

                                                      *indexer_debugLogLevel*
g:indexer_debugLogLevel (default: 0)

  debug log level.

  Levels available:

  0: log is disabled
  1: operations with tags is logged
  2: operations with tags and projects is logged
  3: all possible debug info is logged

  You can see log by typing :IndexerDebugLog
  You can save complete debug snapshot by typing :IndexerDebugSave

                                                  *indexer_debugLogFilename*
g:indexer_debugLogFilename (default: "")

  if not empty and if debug level > 0, then all log writes into this file.

========================================================================
COMMANDS                                                  *indexer-commands*

:IndexerInfo
   
   prints information about current state of plugin, such as projects file
   using, files not found, and other.

   The first thing you should do if plugin doesn't work is type this command :)

:IndexerFiles

   prints list of indexed files

:IndexerRebuild

   rebuild tags for all files in project

                                                          *indexer-debug-commands*
:IndexerDebugLog

   prints debug log.
   Note: you need to specify log level by modifying variable g:indexer_debugLogLevel
   Max log level is 3 (all info)
   Min log level is 0 (log disabled. default)
   
:IndexerDebugSave

   prompts for filename and saves debug snapshot to file.
   
:IndexerDebugInfo

   prints some debug information. (Not very detailed at this moment)


========================================================================
TROUBLESHOOTING                                *indexer-troubleshooting*

There's no normal troubleshooting manual written yet ;)

Well, if you have troubles, please do the following:

*) put in your vimrc following line:
      let g:indexer_debugLogLevel = 2
*) close Vim, open it again and open any file from project.
*) type:
      :IndexerDebugSave
   and enter filename to save snapshot (for instance, ~/vim_dbg.txt)
*) send to me resulting snapshot file, provide detailed info 
   about troubles, and tell:
   -) what Vim version do you use
   -) what OS do you use

*) don't forget to set g:indexer_debugLogLevel = 0 again, to avoid
   useless memory allocation.


========================================================================
THANKS                                                  *indexer-thanks*

There's some people i'd like to say thanks for help with make Indexer better:

* Makoto Nokata
* Alexander Q
* Torkve
* Dan Price
* Thiago Bellini
* Shi Haipend 
* Alexander Pazdnikov

 vim:ft=help:tw=78:  
