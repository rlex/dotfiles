
##
## Digitalpeer's .nanorc <www.digitalpeer.com>
##
## This initialization file is largly adopted from the default/sample
## .nanorc with my own additions and some gathered off the web.
##
## Please note that you must have configured nano with --enable-nanorc
## for this file to be read!  Also note that characters specially
## interpreted by the shell should not be escaped here.
##
## To make sure a value is not enabled, use "unset <option>"
##

## Use auto-indentation
set autoindent

## Backup files to filename~
# set backup

## Constantly display the cursor position in the status bar.
set const

## Use cut to end of line with ^K by default
set cut

## Set the line length for wrapping text and justifying paragraphs.
## If fill is negative, the line length will be the screen width less
## this number.
##
# set fill -8

## Enable ~/.nano_history for saving and reading search/replace strings.
# set historylog

## Use alternate keypad routines
# set keypad

## Allow multiple file buffers (using ^R inserts into separate buffer).
## You must have configured with --enable-multibuffer or --enable-extra
## for this to work.
##
## set multibuffer

## Don't convert files from DOS/Mac format
# set noconvert

## Don't follow symlinks when writing files
# set nofollow

## Don't display the help lists at the bottom of the screen
# set nohelp

## Don't wrap text at all
set nowrap

## Set operating directory.  nano will not read or write files outside
## this directory and its subdirectories.  Also, the current directory
## is changed to here, so files are inserted from this dir.  A blank
## string means the operating directory feature is turned off.
##
# set operatingdir ""

## Preserve the XON and XOFF keys (^Q and ^S)
# set preserve

## The email-quote string, used to justify email-quoted paragraphs.
## This is an extended regular expression if your system supports them,
## otherwise a literal string.  Default:
# set quotestr "^([ 	]*[\|>:}#])+"
## if you have regexps, otherwise:
# set quotestr "> "
## You can get old nano quoted-justify behavior via:
# set quotestr "(> )+"

## Do extended regular expression searches by default 
# set regexp

## Use smooth scrolling as the default
set smooth

## Use this spelling checker instead of the internal one.  This option
## does not properly have a default value.
##
# set speller "aspell -c"

## Allow nano to be suspended with ^Z
# set suspend

## Use this tab size instead of the default; it must be greater than 0
set tabsize 3

## Save automatically on exit, don't prompt
# set tempfile

## Disallow file modification, why would you want this in an rc file? ;)
# set view

#
# C/C++ Syntax Highlighting
#
syntax "cpp-file" "\.(c|h|cpp|hpp|cxx)$"
# Trigraphs
color brightyellow "\?\?[-=(\\)'<!>]"
# Decimal, cotal and hexadecimal numbers
color red "\<[-+]?([1-9][0-9]*|0[0-7]*|0x[0-9a-fA-F]+)([uU][lL]?|[lL][uU]?)?\>"
# Floating point number with at least one digit before decimal point
color red "\<[-+]?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([EePp][+-]?[0-9]+)?[fFlL]?"
color red "\<[-+]?([0-9]+[EePp][+-]?[0-9]+)[fFlL]?"
# Keywords
color brightblue "\<(break|case|continue|default|do|else|for|goto|if)\>"
color brightblue "\<(inline|return|sizeof|switch|typedef|while)\>"
color brightblue "\<(namespace|template|public|protected|private|typename)\>"
color brightblue "\<(virtual|using|try|throw|catch)\>"
color brightblue "\<(operator|new|delete|explicit)\>"
# Storage classes
color cyan "\<(auto|register|static|extern)\>"
# Type qualifiers
color cyan "\<(operator|const|restrict|volatile|inline|mutable|register)\>"
# Enumerations, structs, and unions
color cyan "\<(enum|struct|union|class)\>"
# Type specifiers
color cyan "\<(friend|this|bool|char|double|float|int|long|short|(un)?signed|void)\>"
color cyan "\<(_(Bool|Complex|Imaginary)|FILE|va_list|wc(trans|type)_t)\>"
color cyan "\<(u?int((_fast|_least)?(8|16|32|64)|max|ptr)|w(char|int))_t|\>"
# Preprocessor directives: Conditions
color red "^[ \t]*#(ifn?def|else|endif)\>"
color red "^[ \t]*#(if|elif)[ \t]*!?[ \t]*(defined)?\>"
# Preprocessor directive: Set line number
color yellow "^[ \t]*#line\>.*$"
color red    "^[ \t]*#line\>"
# Preprocessor: Issue error message
color yellow "^[ \t]*#error\>.*$"
color red    "^[ \t]*#error\>"
# Preprocessor: Pragma (don't ask :-)
color yellow "^[ \t]*#pragma\>.*$"
color red    "^[ \t]*#pragma\>"
# Preprocessor: Predefined macros
color red "__(LINE|FILE|func|DATE|TIME|STD(C|_HOSTED|_VERSION))__"
# Preprocessor directives: Definition
color red "^[ \t]*#(define|undef)\>"
# Preprocessor directive: File inclusion
color yellow "^[ \t]*#include[ \t]*(\"[^"]*\"|<[^>]*>)"
color red    "^[ \t]*#include\>"
# String
color yellow "L?\"(\\"|[^"])*\""
color yellow "L?'(\'|[^'])*'"
# Escapes
color red "\\[0-7][0-7]?[0-7]?|\\x[0-9a-fA-F]+|\\[abfnrtv'"\?\\]"
# Comments
color brightwhite start="/\*" end="\*/"
color brightwhite "//.*$"

#
# HTML
#
syntax "HTML" "\.html$"
color blue start="<" end=">"
color red "&[^; 	]*;"

#
# Perl
#
syntax "perl" "\.p[lm]$"
color red "\<(accept|alarm|atan2|bin(d|mode)|c(aller|h(dir|mod|op|own|root)|lose(dir)?|onnect|os|rypt)|d(bm(close|open)|efined|elete|ie|o|ump)|e(ach|of|val|x(ec|ists|it|p))|f(cntl|ileno|lock|ork)|get(c|login|peername|pgrp|ppid|priority|pwnam|(host|net|proto|serv)byname|pwuid|grgid|(host|net)byaddr|protobynumber|servbyport)|([gs]et|end)(pw|gr|host|net|proto|serv)ent|getsock(name|opt)|gmtime|goto|grep|hex|index|int|ioctl|join|keys|kill|last|length|link|listen|local(time)?|log|lstat|m|mkdir|msg(ctl|get|snd|rcv)|next|oct|open(dir)?|ord|pack|pipe|pop|printf?|push|q|qq|qx|rand|re(ad(dir|link)?|cv|do|name|quire|set|turn|verse|winddir)|rindex|rmdir|s|scalar|seek|seekdir|se(lect|mctl|mget|mop|nd|tpgrp|tpriority|tsockopt)|shift|shm(ctl|get|read|write)|shutdown|sin|sleep|socket(pair)?|sort|spli(ce|t)|sprintf|sqrt|srand|stat|study|substr|symlink|sys(call|read|tem|write)|tell(dir)?|time|tr|y|truncate|umask|un(def|link|pack|shift)|utime|values|vec|wait(pid)?|wantarray|warn|write)\>"
color magenta "\<(continue|else|elsif|do|for|foreach|if|unless|until|while|eq|ne|lt|gt|le|ge|cmp|x|my|sub|use|package|can|isa)\>"
color cyan start="[$@%]" end="( |\\W|-)"
color yellow "".*"|qq\|.*\|"
color white "[sm]/.*/"
color white start="(^use| = new)" end=";"
color green "#.*"
color yellow start="<< 'STOP'" end="STOP"

#
# Java 
#
syntax "Java source" "\.java$"
color green "\<(boolean|byte|char|double|float|int|long|new|short|this|transient|void)\>"
color red "\<(break|case|catch|continue|default|do|else|finally|for|if|return|switch|throw|try|while)\>"
color cyan "\<(abstract|class|extends|final|implements|import|instanceof|interface|native|package|private|protected|public|static|strictfp|super|synchronized|throws|volatile)\>"
color red ""[^\"]*""
color yellow "\<(true|false|null)\>"
color blue "//.*"
color blue start="/\*" end="\*/"
color brightblue start="/\*\*" end="\*/"
color brightgreen "[ 	]+$"

# 
# .nanorc
#
syntax "nanorc" "[\.]*nanorc$"
color white "^ *(set|unset).*$"
color cyan "^ *(set|unset) (autoindent|backup|const|cut|fill|keypad|multibuffer|noconvert|nofollow|nohelp|nowrap|operatingdir|preserve|quotestr|regexp|smooth|speller|suspend|tabsize|tempfile|historylog|view)"
color brightwhite "^ *syntax [^ ]*"
color brightblue "^ *set\>" "^ *unset\>" "^ *syntax\>"
color white "^ *color\>.*"
color yellow "^ *color (bright)?(white|black|red|blue|green|yellow|magenta|cyan)\>"
color magenta "^ *color\>"
color green "^#.*$"

#
# Patch files
#
syntax "patch" "\.(patch|diff)$"
color brightgreen "^\+.*"
color green "^\+\+\+.*"
color brightblue "^ .*"
color brightred "^-.*"
color red "^---.*"
color brightcyan "^@@.*"
color magenta "^diff.*"

#
# shell scripts
#
syntax "shellscript" "\.sh$" "Xsession" "Xwilling" "(\.|/|)completion$"
color magenta "^[a-zA-Z_0-9]+\(\)"
color green "\<(case|do|done|elif|else|esac|exit|fi|for|function|if|in|local|read|return|select|shift|then|time|until|while)\>"
color green "(\{|\}|\(|\)|\;|\]|\[|`|\\|\$|<|>|!|=|&|\|)"
color green "-(e|d|f|r|g|u|w|x|L)\>"
color green "-(eq|ne|gt|lt|ge|le|s|n|z)\>"
color cyan "\<make\>" "\<(cat|cd|chmod|chown|cp|echo|env|export|grep|install|let|ln|mkdir|mv|rm|sed|set|tar|touch|umask|unset)\>"
color red "\$\{?[a-zA-Z_0-9]+\}?"
color blue "#.*$"
color brightwhite ""(\\.|[^\"])*"" "'(\\.|[^'])*'"

#
# PHP 
#
syntax "php" "\.php$" "\.php[2345s]$" "\.phtml$"
#special
color brightwhite "([^A-Za-z0-9])|(<\?php|\?>|var|and|or|default|class|extends|true|false|global|function|new|switch|case|break|next|prev|elseif|if|else|foreach|for|as|do|while|exit|decalre|require_once|require|include_once|include|return)([^A-Za-z0-9])"
#types
color brightgreen "([^A-Za-z0-9])|(null|int|string|array|float|bool|object|resource)[^A-Za-z0-9]"
#functions (Ack! - Too many!)
color magenta "([^A-Za-z0-9])|(setcookie|base64_encode|base64_decode|serialize|unserialize|sprintf|rmdir|move_uploaded_file|readdir|chdir|closedir|getcwd|shuffle|strpos|array_reverse|rsort|arsort|array_search|array_merge|array_slice|strnatcasecmp|strtolower|strtoupper|round|ceil|floor|filetype|fileowner|filegroup|fileperms|filesize|fileatime|filemtime|array_push|array_pop|is_dir|realpath|sort|usort|substr_count|file_get_contents|in_array|chr|opendir|substr|mktime|getdata|date|fopen|fwrite|fread|fclose|sizeof|nl2br|str_replace|strstr|preg_match_all|preg_replace|preg_match|preg_split|basename|file_exists|copy|isset|time|unlink|session_start|trim|rtrim|md5|echo|print|printf|explode|implode|array|split|join|stripslashes|addslashes|die|function|mysql_error|mysql_connect|mysql_select_db|mysql_close|mysql_query)([^A-Za-z0-9])*"
#Etc global command ;) (added by ObsidianX)
color blue "([^A-Za-z0-9])|(global|if|else)([^A-Za-z0-9])*"
#Variables
color brightcyan "\$[A-Za-z0-9_\>-]*"
#strings
color brightmagenta ""(\\.|[^\"])*""
color brightmagenta "'(\\.|[^\'])*'"
#color brightyellow start=""(\\.|[^\"])*\\( | )*$" end="^(\\.|[^\"])*""
#color brightblue start="\".*" end=".*\""
#comments
color brightred "//.*"
color brightred "#.*"
color brightred start="/\*" end="\*/"

syntax "TeX" "\.tex$"
color green "\\.|\\[A-Za-z]*"
color magenta "[{}]"
color blue "%.*"


